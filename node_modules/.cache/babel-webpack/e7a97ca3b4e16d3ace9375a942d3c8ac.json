{"ast":null,"code":"import _classCallCheck from \"Z:/GIT REPOS/Weathery/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"Z:/GIT REPOS/Weathery/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate } from 'tslib';\nimport { Input, ViewChild, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nvar _c0 = [\"audio\"];\nvar _c1 = [\"progress\"];\nvar RADIUS = 50;\n\nvar NgxCircularPlayerComponent = /*#__PURE__*/function () {\n  function NgxCircularPlayerComponent() {\n    _classCallCheck(this, NgxCircularPlayerComponent);\n\n    this.radius = 120;\n    this.stroke = 20;\n    this.innerStroke = 2;\n    this.strokeColor = '#fff';\n    this.progressStrokeColor = '#858585';\n    this.innerStrokeColor = '#eee';\n    this.playing = false;\n  }\n\n  _createClass(NgxCircularPlayerComponent, [{\n    key: \"toggle\",\n    value: function toggle() {\n      this.playing = !this.playing;\n\n      if (this.playing) {\n        this.audio.nativeElement.play();\n      } else {\n        this.audio.nativeElement.pause();\n      }\n    }\n  }, {\n    key: \"arrowStyle\",\n    get: function get() {\n      var topWidth = this.radius / 8;\n      var bottomWidth = this.radius / 8;\n      var leftWidth = this.radius / 5;\n      return {\n        'border-top-width': \"\".concat(topWidth, \"px\"),\n        'border-bottom-width': \"\".concat(bottomWidth, \"px\"),\n        'border-left-width': \"\".concat(leftWidth, \"px\")\n      };\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this = this;\n\n      var progress = this.progress.nativeElement; // During SSR we don't need to do anything special here.\n\n      if (!progress || typeof progress.getTotalLength !== 'function') {\n        return;\n      }\n\n      var totalLength = progress.getTotalLength();\n      var audio = this.audio.nativeElement;\n      progress.setAttribute('stroke-dasharray', totalLength);\n      progress.setAttribute('stroke-dashoffset', totalLength);\n      audio.addEventListener('pause', function () {\n        return _this.playing = false;\n      });\n      audio.addEventListener('play', function () {\n        return _this.playing = true;\n      });\n      audio.addEventListener('timeupdate', function () {\n        var currentTime = audio.currentTime;\n        var maxduration = audio.duration;\n        var calc = totalLength - currentTime / maxduration * totalLength;\n        progress.setAttribute('stroke-dashoffset', calc);\n      });\n    }\n  }, {\n    key: \"seek\",\n    value: function seek(evnt) {\n      var ratio = this._calculateAngle(evnt) / 360;\n      var audio = this.audio.nativeElement;\n      var seekTo = ratio * audio.duration;\n      audio.currentTime = seekTo;\n    }\n  }, {\n    key: \"centerX\",\n    get: function get() {\n      return 50;\n    }\n  }, {\n    key: \"centerY\",\n    get: function get() {\n      return 50;\n    }\n  }, {\n    key: \"circleRadius\",\n    get: function get() {\n      return 32;\n    }\n  }, {\n    key: \"pauseLeftBarSize\",\n    get: function get() {\n      return {\n        width: \"\".concat(this.radius / 10, \"px\"),\n        height: \"\".concat(this.radius / 3.5, \"px\"),\n        left: \"calc(50% - \".concat(this.radius / 12, \"px)\")\n      };\n    }\n  }, {\n    key: \"pauseRightBarSize\",\n    get: function get() {\n      return {\n        width: \"\".concat(this.radius / 10, \"px\"),\n        height: \"\".concat(this.radius / 3.5, \"px\"),\n        left: \"calc(50% + \".concat(this.radius / 12, \"px)\")\n      };\n    }\n  }, {\n    key: \"playButtonRadius\",\n    get: function get() {\n      return this.radius - this.radius / 3 + 'px';\n    }\n  }, {\n    key: \"_calculateAngle\",\n    value: function _calculateAngle(evnt) {\n      var x = RADIUS * 2 / (this.radius / evnt.offsetX);\n      var y = RADIUS * 2 / (this.radius / evnt.offsetY);\n      var slope = (RADIUS - y) / (RADIUS - x);\n      var angle = 180 * (Math.abs(Math.atan(slope)) / Math.PI);\n\n      if (x <= RADIUS && y >= RADIUS) {\n        return angle;\n      }\n\n      if (x > RADIUS && y >= RADIUS) {\n        return 180 - angle;\n      }\n\n      if (x > RADIUS && y <= RADIUS) {\n        return 180 + angle;\n      }\n\n      return 180 + (180 - angle);\n    }\n  }]);\n\n  return NgxCircularPlayerComponent;\n}();\n\nNgxCircularPlayerComponent.ɵfac = function NgxCircularPlayerComponent_Factory(t) {\n  return new (t || NgxCircularPlayerComponent)();\n};\n\nNgxCircularPlayerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NgxCircularPlayerComponent,\n  selectors: [[\"ngx-circular-player\"]],\n  viewQuery: function NgxCircularPlayerComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, true);\n      ɵngcc0.ɵɵviewQuery(_c1, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.audio = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.progress = _t.first);\n    }\n  },\n  inputs: {\n    radius: \"radius\",\n    stroke: \"stroke\",\n    innerStroke: \"innerStroke\",\n    strokeColor: \"strokeColor\",\n    progressStrokeColor: \"progressStrokeColor\",\n    innerStrokeColor: \"innerStrokeColor\",\n    source: \"source\"\n  },\n  decls: 13,\n  vars: 24,\n  consts: [[1, \"play\", 3, \"click\"], [1, \"arrow\", 3, \"ngStyle\"], [1, \"pause\"], [1, \"before\", 3, \"ngStyle\"], [1, \"after\", 3, \"ngStyle\"], [\"version\", \"1.1\", \"xmlns\", \"http://www.w3.org/2000/svg\", 0, \"xmlns\", \"xlink\", \"http://www.w3.org/1999/xlink\", \"viewBox\", \"0 0 100 100\"], [\"fill\", \"transparent\"], [\"pointer-events\", \"stroke\", \"d\", \"M 50 50\\n       m -50, 0\\n       a 50,50 0 1,0 100,0\\n       a 50,50 0 1,0 -100,0\", \"stroke-miterlimit\", \"10\", \"fill\", \"transparent\", 2, \"cursor\", \"pointer\", 3, \"click\"], [\"d\", \"M 50 50\\n       m -50, 0\\n       a 50,50 0 1,0 100,0\\n       a 50,50 0 1,0 -100,0\", \"fill\", \"transparent\"], [\"progress\", \"\"], [\"preload\", \"auto\"], [\"audio\", \"\"], [\"type\", \"audio/mp3\", 3, \"src\"]],\n  template: function NgxCircularPlayerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"button\", 0);\n      ɵngcc0.ɵɵlistener(\"click\", function NgxCircularPlayerComponent_Template_button_click_0_listener() {\n        return ctx.toggle();\n      });\n      ɵngcc0.ɵɵelement(1, \"div\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n      ɵngcc0.ɵɵelement(3, \"span\", 3);\n      ɵngcc0.ɵɵelement(4, \"span\", 4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(5, \"svg\", 5);\n      ɵngcc0.ɵɵelement(6, \"circle\", 6);\n      ɵngcc0.ɵɵelementStart(7, \"path\", 7);\n      ɵngcc0.ɵɵlistener(\"click\", function NgxCircularPlayerComponent_Template__svg_path_click_7_listener($event) {\n        return ctx.seek($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(8, \"path\", 8, 9);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵnamespaceHTML();\n      ɵngcc0.ɵɵelementStart(10, \"audio\", 10, 11);\n      ɵngcc0.ɵɵelement(12, \"source\", 12);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.playButtonRadius)(\"height\", ctx.playButtonRadius);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵclassProp(\"hidden-arrow\", ctx.playing);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.arrowStyle);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵclassProp(\"hidden\", !ctx.playing);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.pauseLeftBarSize);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.pauseRightBarSize);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.radius);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"cx\", ctx.centerX)(\"cy\", ctx.centerY)(\"r\", ctx.circleRadius)(\"stroke\", ctx.innerStrokeColor)(\"stroke-width\", ctx.innerStroke);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"stroke\", ctx.progressStrokeColor)(\"stroke-width\", ctx.stroke);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"stroke-miterlimit\", 10)(\"stroke\", ctx.strokeColor)(\"stroke-width\", ctx.stroke);\n      ɵngcc0.ɵɵadvance(4);\n      ɵngcc0.ɵɵproperty(\"src\", ctx.source, ɵngcc0.ɵɵsanitizeUrl);\n    }\n  },\n  directives: [ɵngcc1.NgStyle],\n  styles: [\"svg[_ngcontent-%COMP%]{position:absolute;top:50%;left:50%;stroke:#fff;border-radius:100%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);pointer-events:none;z-index:0}svg[_ngcontent-%COMP%]   path[_ngcontent-%COMP%]{cursor:pointer}button[_ngcontent-%COMP%]{position:relative}.play[_ngcontent-%COMP%]{z-index:3;background:0 0!important;cursor:pointer;outline:0;border:none}.arrow[_ngcontent-%COMP%]{-webkit-transition:.3s;transition:.3s;width:0;height:0;border-top-color:transparent;border-top-style:solid;border-bottom-color:transparent;border-bottom-style:solid;border-left-style:solid;border-left-color:#eee;margin:auto}.pause[_ngcontent-%COMP%], .play[_ngcontent-%COMP%]{width:100%;height:100%;border-radius:50%}.pause[_ngcontent-%COMP%]{-webkit-transition:opacity .3s;transition:opacity .3s}.pause[_ngcontent-%COMP%], .pause[_ngcontent-%COMP%]   .after[_ngcontent-%COMP%], .pause[_ngcontent-%COMP%]   .before[_ngcontent-%COMP%], .play[_ngcontent-%COMP%]{position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.pause[_ngcontent-%COMP%]   .after[_ngcontent-%COMP%], .pause[_ngcontent-%COMP%]   .before[_ngcontent-%COMP%]{content:\\\"\\\";background-color:#eee;display:inline-block;opacity:1}.hidden-arrow[_ngcontent-%COMP%]{border-left-width:0!important}.hidden[_ngcontent-%COMP%]{opacity:0}\"],\n  changeDetection: 0\n});\n\n__decorate([Input()], NgxCircularPlayerComponent.prototype, \"radius\", void 0);\n\n__decorate([Input()], NgxCircularPlayerComponent.prototype, \"stroke\", void 0);\n\n__decorate([Input()], NgxCircularPlayerComponent.prototype, \"innerStroke\", void 0);\n\n__decorate([Input()], NgxCircularPlayerComponent.prototype, \"source\", void 0);\n\n__decorate([Input()], NgxCircularPlayerComponent.prototype, \"strokeColor\", void 0);\n\n__decorate([Input()], NgxCircularPlayerComponent.prototype, \"progressStrokeColor\", void 0);\n\n__decorate([Input()], NgxCircularPlayerComponent.prototype, \"innerStrokeColor\", void 0);\n\n__decorate([ViewChild('audio')], NgxCircularPlayerComponent.prototype, \"audio\", void 0);\n\n__decorate([ViewChild('progress')], NgxCircularPlayerComponent.prototype, \"progress\", void 0);\n\nvar NgxCircularPlayerModule = function NgxCircularPlayerModule() {\n  _classCallCheck(this, NgxCircularPlayerModule);\n};\n\nNgxCircularPlayerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NgxCircularPlayerModule\n});\nNgxCircularPlayerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NgxCircularPlayerModule_Factory(t) {\n    return new (t || NgxCircularPlayerModule)();\n  },\n  imports: [[CommonModule]]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgxCircularPlayerComponent, [{\n    type: Component,\n    args: [{\n      // tslint:disable component-selector\n      selector: 'ngx-circular-player',\n      template: \"<button class=\\\"play\\\" [style.width]=\\\"playButtonRadius\\\" [style.height]=\\\"playButtonRadius\\\" (click)=\\\"toggle()\\\">\\n  <div [class.hidden-arrow]=\\\"playing\\\"\\n       [ngStyle]=\\\"arrowStyle\\\"\\n    class=\\\"arrow\\\">\\n  </div>\\n  <span [class.hidden]=\\\"!playing\\\" class=\\\"pause\\\">\\n    <span class=\\\"before\\\" [ngStyle]=\\\"pauseLeftBarSize\\\"></span>\\n    <span class=\\\"after\\\" [ngStyle]=\\\"pauseRightBarSize\\\"></span>\\n  </span>\\n</button>\\n<svg version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" viewBox=\\\"0 0 100 100\\\"  [style.width]=\\\"radius\\\">\\n  <circle [attr.cx]=\\\"centerX\\\" [attr.cy]=\\\"centerY\\\" [attr.r]=\\\"circleRadius\\\" [attr.stroke]=\\\"innerStrokeColor\\\" fill=\\\"transparent\\\" [attr.stroke-width]=\\\"innerStroke\\\" />\\n\\n  <path\\n    (click)=\\\"seek($event)\\\"\\n    pointer-events=\\\"stroke\\\"\\n    d=\\\"M 50 50\\n       m -50, 0\\n       a 50,50 0 1,0 100,0\\n       a 50,50 0 1,0 -100,0\\\"\\n    stroke-miterlimit=\\\"10\\\"\\n    style=\\\"cursor: pointer\\\"\\n    fill=\\\"transparent\\\"\\n    [attr.stroke]=\\\"progressStrokeColor\\\" [attr.stroke-width]=\\\"stroke\\\"\\n    />\\n\\n  <path\\n    #progress\\n    d=\\\"M 50 50\\n       m -50, 0\\n       a 50,50 0 1,0 100,0\\n       a 50,50 0 1,0 -100,0\\\"\\n    [attr.stroke-miterlimit]=\\\"10\\\"\\n    [attr.stroke]=\\\"strokeColor\\\" fill=\\\"transparent\\\" [attr.stroke-width]=\\\"stroke\\\"\\n  />\\n</svg>\\n\\n<audio preload=\\\"auto\\\" #audio>\\n  <source type=\\\"audio/mp3\\\" [src]=\\\"source\\\">\\n</audio>\\n\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\"svg{position:absolute;top:50%;left:50%;stroke:#fff;border-radius:100%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);pointer-events:none;z-index:0}svg path{cursor:pointer}button{position:relative}.play{z-index:3;background:0 0!important;cursor:pointer;outline:0;border:none}.arrow{-webkit-transition:.3s;transition:.3s;width:0;height:0;border-top-color:transparent;border-top-style:solid;border-bottom-color:transparent;border-bottom-style:solid;border-left-style:solid;border-left-color:#eee;margin:auto}.pause,.play{width:100%;height:100%;border-radius:50%}.pause{-webkit-transition:opacity .3s;transition:opacity .3s}.pause,.pause .after,.pause .before,.play{position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.pause .after,.pause .before{content:\\\"\\\";background-color:#eee;display:inline-block;opacity:1}.hidden-arrow{border-left-width:0!important}.hidden{opacity:0}\"]\n    }]\n  }], function () {\n    return [];\n  }, {\n    radius: [{\n      type: Input\n    }],\n    stroke: [{\n      type: Input\n    }],\n    innerStroke: [{\n      type: Input\n    }],\n    strokeColor: [{\n      type: Input\n    }],\n    progressStrokeColor: [{\n      type: Input\n    }],\n    innerStrokeColor: [{\n      type: Input\n    }],\n    source: [{\n      type: Input\n    }],\n    audio: [{\n      type: ViewChild,\n      args: ['audio']\n    }],\n    progress: [{\n      type: ViewChild,\n      args: ['progress']\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxCircularPlayerModule, {\n    declarations: function declarations() {\n      return [NgxCircularPlayerComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [NgxCircularPlayerComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgxCircularPlayerModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxCircularPlayerComponent],\n      imports: [CommonModule],\n      exports: [NgxCircularPlayerComponent]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ngx-circular-player\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NgxCircularPlayerComponent, NgxCircularPlayerModule };","map":{"version":3,"sources":["ngx-circular-player/lib/ngx-circular-player.component.ts","ngx-circular-player/lib/ngx-circular-player.module.ts","ngx-circular-player/public-api.ts","ngx-circular-player/ngx-circular-player.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Input,\n  AfterViewInit,\n  ViewChild,\n  ElementRef,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nconst RADIUS = 50;\n\n@Component({\n  // tslint:disable component-selector\n  selector: 'ngx-circular-player',\n  templateUrl: './ngx-circular-player.component.html',\n  styleUrls: ['./ngx-circular-player.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxCircularPlayerComponent implements AfterViewInit {\n  @Input() radius = 120;\n  @Input() stroke = 20;\n  @Input() innerStroke = 2;\n  @Input() source: string;\n  @Input() strokeColor = '#fff';\n  @Input() progressStrokeColor = '#858585';\n  @Input() innerStrokeColor = '#eee';\n\n  @ViewChild('audio') audio: ElementRef;\n  @ViewChild('progress') progress: ElementRef;\n\n  playing = false;\n\n  toggle() {\n    this.playing = !this.playing;\n    if (this.playing) {\n      this.audio.nativeElement.play();\n    } else {\n      this.audio.nativeElement.pause();\n    }\n  }\n\n  get arrowStyle() {\n    const topWidth = this.radius / 8;\n    const bottomWidth = this.radius / 8;\n    const leftWidth = this.radius / 5;\n    return {\n      'border-top-width': `${topWidth}px`,\n      'border-bottom-width': `${bottomWidth}px`,\n      'border-left-width': `${leftWidth}px`\n    };\n  }\n\n  ngAfterViewInit() {\n    const progress = this.progress.nativeElement;\n    // During SSR we don't need to do anything special here.\n    if (!progress || typeof progress.getTotalLength !== 'function') {\n      return;\n    }\n    const totalLength = progress.getTotalLength();\n    const audio = this.audio.nativeElement as HTMLAudioElement;\n    progress.setAttribute('stroke-dasharray', totalLength);\n    progress.setAttribute('stroke-dashoffset', totalLength);\n    audio.addEventListener('pause', () => (this.playing = false));\n    audio.addEventListener('play', () => (this.playing = true));\n    audio.addEventListener('timeupdate', () => {\n      const currentTime = audio.currentTime;\n      const maxduration = audio.duration;\n      const calc = totalLength - (currentTime / maxduration) * totalLength;\n\n      progress.setAttribute('stroke-dashoffset', calc);\n    });\n  }\n\n  seek(evnt: MouseEvent) {\n    const ratio = this._calculateAngle(evnt) / 360;\n    const audio = this.audio.nativeElement as HTMLAudioElement;\n    const seekTo = ratio * audio.duration;\n    audio.currentTime = seekTo;\n  }\n\n  get centerX() {\n    return 50;\n  }\n\n  get centerY() {\n    return 50;\n  }\n\n  get circleRadius() {\n    return 32;\n  }\n\n  get pauseLeftBarSize() {\n    return {\n      width: `${this.radius / 10}px`,\n      height: `${this.radius / 3.5}px`,\n      left: `calc(50% - ${this.radius / 12}px)`\n    };\n  }\n\n  get pauseRightBarSize() {\n    return {\n      width: `${this.radius / 10}px`,\n      height: `${this.radius / 3.5}px`,\n      left: `calc(50% + ${this.radius / 12}px)`\n    };\n  }\n\n  get playButtonRadius() {\n    return this.radius - this.radius / 3 + 'px';\n  }\n\n  private _calculateAngle(evnt: MouseEvent) {\n    const x = (RADIUS * 2) / (this.radius / evnt.offsetX);\n    const y = (RADIUS * 2) / (this.radius / evnt.offsetY);\n    const slope = (RADIUS - y) / (RADIUS - x);\n    const angle = 180 * (Math.abs(Math.atan(slope)) / Math.PI);\n\n    if (x <= RADIUS && y >= RADIUS) {\n      return angle;\n    }\n    if (x > RADIUS && y >= RADIUS) {\n      return 180 - angle;\n    }\n    if (x > RADIUS && y <= RADIUS) {\n      return 180 + angle;\n    }\n    return 180 + (180 - angle);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxCircularPlayerComponent } from './ngx-circular-player.component';\nimport { CommonModule } from '@angular/common';\n\n\n\n@NgModule({\n  declarations: [NgxCircularPlayerComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [NgxCircularPlayerComponent]\n})\nexport class NgxCircularPlayerModule { }\n","/*\n * Public API Surface of ngx-circular-player\n */\n\nexport * from './lib/ngx-circular-player.component';\nexport * from './lib/ngx-circular-player.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}